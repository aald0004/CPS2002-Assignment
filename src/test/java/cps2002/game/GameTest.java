package cps2002.game;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;

/* this class tests the functionality of the Game class */

public class GameTest {

    private Game g;
    private Map tm;
    private Position pos;
    private Position treasurePos;

    // set up the game, map, and two position instances
    @Before
    public void setup(){
        g = new Game();
        tm = new Map(4);
        pos = new Position(2,2);
        treasurePos = new Position(4,2);
    }



    // test setNumPlayers. Expected true
    @Test
    public void testSetNumOfPlayersWithTrueCondition(){

        boolean ans = g.setNumPlayers(4);

        boolean expected = true;

        assertEquals(expected, ans);
    }

    // test setNumPlayers. Expected false because of too little players
    @Test
    public void testSetNumOfPlayersWithFalseCondition(){

        boolean ans = g.setNumPlayers(-1);
        boolean expected = false;

        assertEquals(expected, ans);
    }

    // test setNumPlayers. Expected false because of too many players
    @Test
    public void testSetNumOfPlayersWithFalseConditionBecauseOfTooManyPlayers(){

        boolean ans = g.setNumPlayers(10);
        boolean expected = false;

        assertEquals(expected, ans);
    }

    // test setPlayers. Expected false
    @Test
    public void setPlayersTest(){

        boolean ans = g.setPlayers(-3);


        assertEquals(false, ans);
    }

    // test setPlayers. Expected true
    @Test
    public void setPlayersTestWithGivenInput(){

        boolean ans = g.setPlayers(5);


        assertEquals(true, ans);
    }

    /*@Test
    public void testMain(){

        Game.main(new String[] {""});
        assertEquals(0, g.numOfPlayers);
    }*/

    /*@Test
    public void testStartGamePlayerFrames(){
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 5;
        g.addPlayers();
        g.setInitialPos();
        g.boardSize = 7;
        g.setFrames();
        int size = g.playerFrames.size();
        assertEquals(4,size);
    }*/


    // Testing addPlayers by adding players to the array list and checking that the
    // size of the list increased
    @Test
    public void testAddPlayers(){
        g.numOfPlayers = 4;
        g.tm = tm;
        g.addPlayers();
        int size = g.players.size();

        assertEquals(4,size);
    }




    // testing up move
    @Test
    public void testExecuteMoveWithUp(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(pos);
        g.executeMove("U",g.players.get(2),3);
        assertEquals(1,g.players.get(2).position.gety());

    }

    // test down move
    @Test
    public void testExecuteMoveWithDownCommand(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(pos);
        g.executeMove("D",g.players.get(2),3);
        assertEquals(3,g.players.get(2).position.gety());

    }

    // test startingPosition by checking that the player's starting position x coordinate
    // is equal to the x coordinate generated by the function
    @Test
    public void testStartingPos(){

        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();


        Position spos = g.startingPos();


        Position expectedPos = new Position(spos.getx(),spos.gety());

        assertEquals(expectedPos.getx(), spos.getx());

        // assign nulls to new Position(s) created
        expectedPos = null;
        spos = null;
    }

    // test left move
    @Test
    public void testExecuteMoveWithLeft(){

        // set up required variables and check the player's new x coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(pos);
        g.executeMove("L",g.players.get(2),3);
        assertEquals(1,g.players.get(2).position.getx());

    }

    // test right move
    @Test
    public void testExecuteMoveWithRight(){

        // set up required variables and check the player's new x coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(pos);
        g.executeMove("R",g.players.get(2),3);
        assertEquals(3,g.players.get(2).position.getx());

    }

    //Test set initialPosition
    @Test
    public void testInitialPosition(){

        // set up a new player
        Player player = new Player(5,2);

        // set up tile map
        g.tm = tm;
        g.tm.size = 5;
        g.numOfPlayers = 2;
        g.tm.map = g.tm.setMap();

        // add new player to players array
        g.players.add(player);

        // set the initial position for the player
        g.setInitialPos();

        // check if the starting position is equal to the player's position
        assertEquals(player.startingPosition,player.position);
    }


    // test that revealColour functions correctly with grass tile
    @Test
    public void testGrassRevealColour(){

        // set up a new player
        Player player = new Player(5,2);

        // set up tile map
        g.tm = tm;
        g.tm.size = 5;
        g.numOfPlayers = 2;
        g.tm.map = g.tm.setMap();

        // add new player to players array
        g.players.add(player);

        g.revealColour(0,0,0);

        // set up the expected map
        char[][] expectedPlayerMap = new char[g.tm.size][g.tm.size];
        expectedPlayerMap[0][0] = 'G';
        expectedPlayerMap[0][1] = 'g';
        expectedPlayerMap[0][2] = 'g';
        expectedPlayerMap[0][3] = 'g';
        expectedPlayerMap[0][4] = 'g';

        expectedPlayerMap[1][0] = 'g';
        expectedPlayerMap[1][1] = 'g';
        expectedPlayerMap[1][2] = 'g';
        expectedPlayerMap[1][3] = 'g';
        expectedPlayerMap[1][4] = 'g';

        expectedPlayerMap[2][0] = 'g';
        expectedPlayerMap[2][1] = 'g';
        expectedPlayerMap[2][2] = 'g';
        expectedPlayerMap[2][3] = 'g';
        expectedPlayerMap[2][4] = 'g';

        expectedPlayerMap[3][0] = 'g';
        expectedPlayerMap[3][1] = 'g';
        expectedPlayerMap[3][2] = 'g';
        expectedPlayerMap[3][3] = 'g';
        expectedPlayerMap[3][4] = 'g';

        expectedPlayerMap[4][0] = 'g';
        expectedPlayerMap[4][1] = 'g';
        expectedPlayerMap[4][2] = 'g';
        expectedPlayerMap[4][3] = 'g';
        expectedPlayerMap[4][4] = 'g';

        assertArrayEquals(expectedPlayerMap,player.tm.map);


    }


    // test that revealColour functions correctly with water tile
    @Test
    public void testWaterRevealColour(){

        // set up a new player
        Player player = new Player(5,2);

        // set up tile map
        g.tm = tm;
        g.tm.size = 5;
        g.numOfPlayers = 2;
        g.tm.map = g.tm.setMap();

        // add new player to players array
        g.players.add(player);

        g.revealColour(1,4,0);

        // set up the expected map
        char[][] expectedPlayerMap = new char[g.tm.size][g.tm.size];
        expectedPlayerMap[0][0] = 'g';
        expectedPlayerMap[0][1] = 'g';
        expectedPlayerMap[0][2] = 'g';
        expectedPlayerMap[0][3] = 'g';
        expectedPlayerMap[0][4] = 'g';

        expectedPlayerMap[1][0] = 'g';
        expectedPlayerMap[1][1] = 'g';
        expectedPlayerMap[1][2] = 'g';
        expectedPlayerMap[1][3] = 'g';
        expectedPlayerMap[1][4] = 'g';

        expectedPlayerMap[2][0] = 'g';
        expectedPlayerMap[2][1] = 'g';
        expectedPlayerMap[2][2] = 'g';
        expectedPlayerMap[2][3] = 'g';
        expectedPlayerMap[2][4] = 'g';

        expectedPlayerMap[3][0] = 'g';
        expectedPlayerMap[3][1] = 'g';
        expectedPlayerMap[3][2] = 'g';
        expectedPlayerMap[3][3] = 'g';
        expectedPlayerMap[3][4] = 'g';

        expectedPlayerMap[4][0] = 'g';
        expectedPlayerMap[4][1] = 'w';
        expectedPlayerMap[4][2] = 'g';
        expectedPlayerMap[4][3] = 'g';
        expectedPlayerMap[4][4] = 'g';

        assertArrayEquals(expectedPlayerMap,player.tm.map);


    }


    // Test up move with out of bounds
    @Test
    public void testUpWithOutOfBounds(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(new Position(0,0));
        g.executeMove("U",g.players.get(2),3);
        assertEquals(0,g.players.get(2).position.gety());
    }

    // Test down move with out of bounds
    @Test
    public void testDownWithOutOfBounds(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(new Position(6,6));
        g.executeMove("D",g.players.get(2),3);
        assertEquals(6,g.players.get(2).position.gety());
    }

    // Test left move with out of bounds
    @Test
    public void testLeftWithOutOfBounds(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(new Position(0,0));
        g.executeMove("L",g.players.get(2),3);
        assertEquals(0,g.players.get(2).position.getx());
    }

    // Test right move with out of bounds
    @Test
    public void testRightWithOutOfBounds(){

        // set up required variables and check the player's new y coordinate
        g.numOfPlayers = 4;
        g.tm = tm;
        g.tm.size = 7;
        g.tm.map = g.tm.setMap();
        g.addPlayers();
        g.players.get(2).setPosition(new Position(6,6));
        g.executeMove("R",g.players.get(2),3);
        assertEquals(6,g.players.get(2).position.getx());
    }


    // Test htmlString
    @Test
    public void testHTMLString(){

        // set up the required configurations
        g.numOfPlayers = 2;
        g.tm = tm;
        g.tm.size = 5;
        g.addPlayers();
        g.players.get(0).setPosition(new Position(0,0));
        g.players.get(0).tm.generatePlayerMap();
        g.players.get(0).tm.revealColour(0,0,'G');
        g.players.get(0).tm.revealColour(0,1,'G');
        g.players.get(0).tm.revealColour(0,2,'w');
        g.players.get(0).tm.revealColour(0,3,'t');
        String html = g.htmlString(0);

        // html file expected
        String expectedHTML = "<!DOCTYPE html>\n" +
                "<html>\n" +
                "<head>\n" +
                "<style>\n" +
                "\n" +
                "/* set the display type to a table */\n" +
                ".table{\n" +
                "display: table;\n" +
                "width: 100%;\n" +
                "}\n" +
                "\n" +
                "/* set the display type to a table row */\n" +
                ".tableRow {\n" +
                "display: table-row;\n" +
                "}\n" +
                "\n" +
                "/* set the grass tile, treasure tile and water tile to have a border,\n" +
                "padding and set their display type */\n" +
                ".grassTile, .treasureTile, .waterTile, .greyTile {\n" +
                "border: 1px solid #999999;\n" +
                "display: table-cell;\n" +
                "padding: 10px 10px;\n" +
                "}\n" +
                "\n" +
                "/* set the grass tile colour to green */\n" +
                ".grassTile{\n" +
                "background-color:green;\n" +
                "}\n" +
                "\n" +
                ".greyTile{\n" +
                "background-color:grey;\n" +
                "}\n" +
                "\n" +
                "/* set the treasure tile colour to yellow */\n" +
                ".treasureTile{\n" +
                "background-color:yellow;\n" +
                "}\n" +
                "\n" +
                "/* set the water tile colour to blue */\n" +
                ".waterTile{\n" +
                "background-color:blue;\n" +
                "}\n" +
                "\n" +
                ".tableBody {\n" +
                "display: table-row-group;\n" +
                "}\n" +
                "\n" +
                "/* set the font size and width of the title */\n" +
                ".title{\n" +
                "font-size: 17px;\n" +
                "width: 25%;\n" +
                "}\n" +
                "\n" +
                "</style\n" +
                "\n" +
                "></head>\n" +
                "\n" +
                "<body>\n" +
                "<div class = \"title\">\n" +
                "<h3> Player 1 Map</h3>\n" +
                "\n" +
                "<br>\n" +
                "\n" +
                "<div class=\"table\">\u2028\n" +
                "<div class=\"tableBody\">\n" +
                "<div class=\"tableRow\">\n" +
                "\n" +
                "<div class=\"grassTile\" style = \"background-position:center;background-image:url('./Chess_pdt60.png')\"></div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "</div>\n" +
                "\n" +
                "<div class=\"tableRow\">\n" +
                "\n" +
                "<div class=\"grassTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "</div>\n" +
                "\n" +
                "<div class=\"tableRow\">\n" +
                "\n" +
                "<div class=\"waterTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "</div>\n" +
                "\n" +
                "<div class=\"tableRow\">\n" +
                "\n" +
                "<div class=\"treasureTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "</div>\n" +
                "\n" +
                "<div class=\"tableRow\">\n" +
                "\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "<div class=\"greyTile\">&nbsp;</div>\n" +
                "</div>\n" +
                "\n" +
                "</div>\n" +
                "</div>\n" +
                "</div>\n" +
                "</body>\n" +
                "</html>";

        assertEquals(expectedHTML,html);


    }

    // test if the file is being created
    @Test
    public void testGenerateHTMLFiles(){
        // set up the required configurations
        g.numOfPlayers = 2;
        g.tm = tm;
        g.tm.size = 5;
        g.addPlayers();
        g.players.get(0).setPosition(new Position(0,0));
        g.players.get(0).tm.generatePlayerMap();
        g.players.get(0).tm.revealColour(0,0,'G');
        g.players.get(0).tm.revealColour(0,1,'G');
        g.players.get(0).tm.revealColour(0,2,'w');
        g.players.get(0).tm.revealColour(0,3,'t');
        String html = g.htmlString(0);

        // generate the html file
        try {
            g.generateHTMLFiles(html, 0);

        } catch (IOException e) {
            e.printStackTrace();
        }

        File file = new File("htmlFiles/map_player 1.html");

        // check if file is created
        assertEquals(file.exists(),true);


    }

    // set the objects to null
    @After
    public void teardown(){
        g = null;
        tm = null;
        pos = null;
        treasurePos = null;
    }
}
